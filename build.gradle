buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:${project.asciiDoctorGradlePluginVersion}"
        classpath "org.asciidoctor:asciidoctorj-pdf:${project.asciiDoctorJPdfVersion}"
        classpath "org.ajoberstar:gradle-git:${project.gradleGitVersion}"
        classpath "com.bluepapa32:gradle-watch-plugin:${project.gradleWatchPluginVersion}"
        classpath "org.kordamp.gradle:livereload-gradle-plugin:${project.livereloadGradlePluginVersion}"
    }
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'com.bluepapa32.watch'
apply plugin: 'org.kordamp.gradle.livereload'
apply plugin: 'java'
apply plugin: 'idea'

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    testCompile "io.vavr:vavr:${project.version}"
    testCompile "junit:junit:4.11"
    testCompile "org.assertj:assertj-core:3.0.0"
    testCompile "ch.qos.logback:logback-classic:0.9.26"
    testCompile "org.mockito:mockito-core:1.10.19"
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

idea {
    project {
        jdkName = 1.8
        languageLevel = 1.8
    }
}

asciidoctor {
    sources {
        include 'index.adoc'
    }
    backends = ['html5']
    resources {
        from(sourceDir) {
            include 'images/**'
        }
    }
}

tasks.withType(Copy) {
    eachFile { println it.file }
}

task copyCNAME(type: Copy) {
    from 'CNAME'
    into file(asciidoctor.outputDir.path + '/html5')
}

//asciidoctor.dependsOn test
copyCNAME.dependsOn asciidoctor
publishGhPages.dependsOn copyCNAME

githubPages {
    repoUri = 'https://github.com/vavr-io/vavr-docs.git'

    credentials {
        username = project.githubUser
        password = project.githubPassword
    }

    pages {
        from file(asciidoctor.outputDir.path + '/html5')
        // into project.version
    }
}

watch {
    asciidoc {
        files fileTree('src/docs/asciidoc')
        tasks 'asciidoctor'
    }
}

liveReload {
    docRoot asciidoctor.outputDir.canonicalPath
}
